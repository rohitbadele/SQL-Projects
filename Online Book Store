-- Create Database
CREATE DATABASE OnlineBookstore;

-- Switch to the database
USE OnlineBookstore;

-- Create Table
DROP TABLE IF EXISTS Books;
CREATE TABLE Books (
 Book_ID SERIAL PRIMARY KEY,
 Title VARCHAR(100),
 Author VARCHAR(100),
 Genre VARCHAR(50),
 Published_Year INT,
 Price NUMERIC(10,2), 
 Stocks INT
 );
 
DROP TABLE IF EXISTS Customers;
 CREATE TABLE Customers (
 Customer_ID SERIAL PRIMARY KEY,
 Name VARCHAR(100),
 Email VARCHAR(100),
 Phone VARCHAR(15),
 City VARCHAR(50),
 Country VARCHAR(150)
 );
 
 DROP TABLE IF EXISTS Orders;
 CREATE TABLE Orders (
 Order_ID SERIAL PRIMARY KEY,
 Customer_ID INT REFERENCES Customers(Customer_ID),
 Book_ID INT REFERENCES Books(Book_ID), 
 Order_Date DATE,
 Quantity INT ,
 Total_Amount NUMERIC(10,2)
 );
 
 SELECT * FROM Books;
 SELECT * FROM Customers;
 SELECT * FROM Orders;
 
 -- BASIC QUERIES -- 
 
--  1) Retrieve all books in the "Fiction" genre:
SELECT * FROM Books
WHERE Genre = 'Fiction';

-- 2) Find books published after the year 1950:
SELECT * FROM Books
WHERE Published_Year > 1950;
    
-- 3) List all customers from the Canada:
SELECT * FROM Customers
WHERE Country = 'Canada';
    
-- 4) Show orders placed in November 2023:
SELECT * FROM Orders
WHERE Order_Date BETWEEN '2023-11-01' AND '2023-11-30';
    
-- 5) Retrieve the total stock of books available:
SELECT SUM(Stocks) AS Total_Stock FROM Books;

-- 6) Find the details of the most expensive book:
SELECT * FROM Books
ORDER BY Price DESC LIMIT 1;

-- 7) Show all customers who ordered more than 1 quantity of a book:
SELECT * FROM Orders
WHERE quantity > 1;

-- 8) Retrieve all orders where the total amount exceeds $20:
SELECT * FROM Orders
WHERE Total_Amount>20;

-- 9) List all genres available in the Books table:
SELECT DISTINCT Genre FROM Books;

-- 10) Find the book with the lowest stock:
SELECT * FROM Books
ORDER BY Stocks ASC LIMIT 1;

-- 11) Calculate the total revenue generated from all orders:
SELECT SUM(Total_Amount) AS Total_Revenue FROM Orders;

-- ADVANCE QUERIES -- 

USE OnlineBookstore;

-- 1) Retrieve the total number of books sold for each genre:
SELECT Books.Genre, SUM(Orders.Quantity) AS Total_Sold 
FROM Orders
JOIN Books ON  Orders.Book_ID = Books.Book_ID
GROUP BY Books.Genre;

-- 2) Find the average price of books in the "Fantasy" genre:
SELECT Genre, AVG(Price) AS Average_Price FROM Books
WHERE Genre='Fantasy';

-- 3) List customers who have placed at least 2 orders:
SELECT Customer_ID, COUNT(Order_ID) AS Order_Count
FROM Orders
GROUP BY Customer_ID
HAVING COUNT(Order_ID) >=2
ORDER BY Order_Count;

-- 4) Find the most frequently ordered book:
SELECT Book_ID, COUNT(Order_ID) AS Order_Count
FROM Orders
GROUP BY Book_ID
ORDER BY Order_Count DESC;

-- 5) Show the top 3 most expensive books of 'Fantasy' Genre:
SELECT * FROM Books
WHERE Genre='Fantasy'
ORDER BY Price DESC LIMIT 3;

-- 6) Retrieve the total quantity of books sold by each author:
SELECT Books.Author, SUM(Orders.Quantity) AS Total_Book_Sold
FROM Orders
JOIN Books ON Orders.Book_ID = Books.Book_ID
GROUP BY Books.Author
ORDER BY Total_Book_Sold;

-- 7) List the cities where customers who spent over $30 are located:
SELECT DISTINCT Customers.City, Orders.Total_Amount FROM Orders
JOIN Customers ON Customers.Customer_ID = Orders.Customer_ID
WHERE Total_Amount > 30
ORDER BY Customers.City;

-- 8) Find the customer who spent the most on orders:
SELECT Customers.Customer_ID, Customers.Name, SUM(Orders.Total_Amount) AS Total_Spent
FROM Orders
JOIN Customers ON Customers.Customer_ID = Orders.Customer_ID
GROUP BY Customers.Customer_ID, Customers.Name
ORDER BY Total_Spent DESC LIMIT 1;

-- 9) Calculate the stock remaining after fulfilling all orders:
SELECT Books.Book_ID, Books.Title, Books.Stocks, COALESCE(SUM(Orders.Quantity), 0) AS Order_Quantity,
Books.Stocks - COALESCE(SUM(Orders.Quantity), 0) AS Stock_Remaining
FROM Books
LEFT JOIN Orders ON Books.Book_ID = Orders.Book_ID
GROUP BY Books.Book_ID;
